# CMakeLists.txt for Falcata
#
# 2024 by Hatem Nabli

cmake_minimum_required(VERSION 3.8)
set(this Falcata)
project(${this} C CXX)

# append cmake modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

#
if(CMAKE_BUILD_TYPE STREQUAL "debug")
    set(CMAKE_CXX_CLANG_TIDY "clang-tidy;-checks=google-*,-clang-analyzer-*")
endif()

# Enable compilation database
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

enable_testing()

get_directory_property(ParentDirectory PARENT_DIRECTORY)

if(ParentDirectory STREQUAL "")
    # Define option for linking  with  the runtime statically.
    if(MSVC)
        option(RUNTIME_STATIC_LINKAGE "Link with the runtime library statically" OFF)
    endif(MSVC)

    # If the runtime static linkage option is turned to ON, then replace
    # compiler flag that selects runtime library variant.
    if(MSVC AND RUNTIME_STATIC_LINKAGE)
        foreach(flag
            CMAKE_C_FLAGS
            CMAKE_CXX_FLAGS
            CMAKE_C_FLAGS_DEBUG
            CMAKE_CXX_FLAGS_DEBUG
            CMAKE_C_FLAGS_RELEASE
            CMAKE_CXX_FLAGS_RELEASE
            CMAKE_C_FLAGS_MINSIZEREL
            CMAKE_CXX_FLAGS_MINSIZEREL
            CMAKE_C_FLAGS_RELWITHDEBINFO
            CMAKE_CXX_FLAGS_RELWITHDEBINFO)
            if(${flag} MATCHES "/MD")
                string(REGEX REPLACE "/MD" "/MT" ${flag} "${${flag}}")
            endif(${flag} MATCHES "/MD")
        endforeach(flag)
    endif(MSVC AND RUNTIME_STATIC_LINKAGE)

    # Keep Google Test's linkage of the runtime in sync with our own.
    if(MSVC)
        if(RUNTIME_STATIC_LINKAGE)
            set(gtest_force_shared_crt OFF CACHE BOOL "Use shared (DLL) run-time lib even when Google Test is built as static lib." FORCE)
        else(RUNTIME_STATIC_LINKAGE)
            set(gtest_force_shared_crt ON CACHE BOOL "Use shared (DLL) run-time lib even when Google Test is built as static lib." FORCE)
        endif(RUNTIME_STATIC_LINKAGE)
    endif(MSVC)

    # Organize applications, libraries, etc. in folders in the IDE
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)

    # Ensure proper loading of side-loaded shared libraries
    # on all targets.
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

    if(APPLE)
        set(CMAKE_INSTALL_RPATH "@loader_path")
    elseif(UNIX)
        set(CMAKE_INSTALL_RPATH "\$ORIGIN")
    endif()

    # Don't add the goofy "d" postfix for debug builds of libraries.
    set(CMAKE_DEBUG_POSTFIX "")

    # Suppress Microsoft warnings about functions being unsafe.
    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)

    # Google Test
    set(BUILD_GTEST ON CACHE BOOL "Builds the googletest subproject" FORCE)
    set(BUILD_GMOCK OFF CACHE BOOL "Builds the googlemock subproject" FORCE)
    ## add_subdirectory(googletest)
    # Add GoogleTest dependency
    include(FetchContent)
    FetchContent_Declare(
      googletest
      URL https://github.com/google/googletest/archive/refs/tags/release-1.13.0.zip
    )
    FetchContent_MakeAvailable(googletest)
    set_target_properties(gtest gtest_main PROPERTIES FOLDER Libraries)

    # All other libraties can be pulled in whiout further configuration.
    FetchContent_Declare(
      Uri
      GIT_REPOSITORY https://github.com/HANABLI/Uri.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(Uri)
    FetchContent_Declare(
      Http
      GIT_REPOSITORY https://github.com/HANABLI/Http.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(Http)
    FetchContent_Declare(
      MqttV5
      GIT_REPOSITORY https://github.com/HANABLI/MqttV5.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(MqttV5)
    FetchContent_Declare(
      Utf8
      GIT_REPOSITORY https://github.com/HANABLI/Utf8.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(Utf8)
    FetchContent_Declare(
      Json
      GIT_REPOSITORY https://github.com/HANABLI/Json.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(Json)
    FetchContent_Declare(
      Json
      GIT_REPOSITORY https://github.com/HANABLI/Json.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(Json)
    FetchContent_Declare(
      SystemUtils
      GIT_REPOSITORY https://github.com/HANABLI/SystemUtils.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(SystemUtils)
    FetchContent_Declare(
      StringUtils
      GIT_REPOSITORY https://github.com/HANABLI/StringUtils.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(StringUtils)
    FetchContent_Declare(
      HttpNetworkTransport
      GIT_REPOSITORY https://github.com/HANABLI/HttpNetworkTransport.git
      GIT_TAG master
    )
    FetchContent_MakeAvailable(HttpNetworkTransport)
    ##add_subdirectory(Uri)
    ##add_subdirectory(Http)
    ##add_subdirectory(MqttV5)
    ##add_subdirectory(Utf8)
    ##add_subdirectory(Json)
    ##add_subdirectory(WebServer)
    ##add_subdirectory(MessageHeaders)
    ##add_subdirectory(StringUtils)
    ##add_subdirectory(SystemUtils)
    ##add_subdirectory(HttpNetworkTransport)
    ##add_subdirectory(WebSocket)
    ##add_subdirectory(Sha1)
    ##add_subdirectory(Base64)
endif(ParentDirectory STREQUAL "")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

# ClangFormat function
include(ClangFormat)
add_clang_format_target(format-code ${PROJECT_SOURCE_DIR})
